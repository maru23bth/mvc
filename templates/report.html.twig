{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
<h1>Redovisning i kursen mvc</h1>

<article id="kmom01">
    <h2>Kmom01</h2>

    <p>
        PHP har jag jobbat med till och från sedan version 2 ungefär tror jag.<br>
        Och några mindre försök i objektorienterad stil också, men inte speciellt mycket.<br>


    </p>
    <p>
        En klass är en "mall" som man använder för att skapa nya objekt.<br>
        Klasser kan innehålla metoder (funktioner) och properties(varibler).<br>
        Klasser och objekt är två begrepp som är viktiga när det gäller objektorienterad programmering.<br>
        Klassen är en mall för objektet kan man säga, för att utnyttja klassens metoder måste man skapa ett objekt.<br>
        Ett objekt är en förekomst av en klass.<br>
        <br>
        En klass kan dock innehålla statiska metoder och properties som kan köras utan att ett objekt skapats från
        klassen.
    </p>
    <p>
        Jag uppfattar kodbas och koden som väldigt strukturerad och gillar den.<br>
        Det är min första bekantskap med symfony och det finns nog mer att lära.<br>
        Kanske skulle jag önskat lite mer struktur på routes, men det går säkert att göra själv.<br>
    </p>
    <p>
        För mig med en del väldigt enkel PHP bakom mig vill jag framförallt bli bättre på att organisera min kod.<br>
        Så värdefulla delar är framförallt Namespaces, autoloading m.m. som jag vill lära mig mer om.<br>
    </p>
    <p>
        Att sätta upp och använda Symfony blir mitt TIL denna vecka.<br>
    </p>
</article>

<article id="kmom02">
    <h2>Kmom02</h2>

    <ul>
        <li><b>Arv</b>
            Ärver egenskaper från en föräldrarklass.
            Dvs. de variabler (egenskaper) och metoder som skapas i den nya klassen kan addera funktion eller skriva
            över funktioner från föräldrarklassen.<br>
            Föräldrarklssens variabler och metoder finns också i den nya klassen.
        </li>
        <li><b>Komposition</b>
            Komposition är när en klass innehåller en eller flera andra klasser.
        </li>
        <li><b>Interface</b>
            Objektgränssnitt anger vilka metoder en klass måste implementera.<br>
            Men utan att definiera hur dessa metoder ska implementeras.
        </li>
        <li><b>Trait</b>
            Mekanism för kodåteranvändning eftersom PHP bara kan ärva från en klass.<br>
            Definieras en trait "class" kan denna kod "importeras" och därmed användas i flera klasser.
        </li>
    </ul>

    <p>
        Jag började med att göra Card klassen, som var ganska självförklarande.<br>
        Därefter började jag med DeckOfCards...
        när jag senare skulle börja med CardHand kom jag underfund med att en "hand" och kortlek delar grundegenskapen
        att hålla kort.<br>
        Och jag strukturerade därför om och skapade CardCollection som har som uppgift att hålla 0 eller flera Card.<br>
        Därmed fick CardHand och DeckOfCards ärva CardCollection klassen.<br>
        Den konstruktionen är jag just nu nöjd med...<br>
        Jag har fokuserat på funktionen, så gränssnittet finns det mycket att jobba med.
    </p>

    <p>
        Jag gillar strukturen i Symfony, det jag kanske skulle önska är lite mer folder -> route stuktur.<br>
        Det kanske går att göra, men just nu kan vilket som hellst route dölja sig i vilken controller som helst.<br>
    </p>

    <p>
        TIL denna vecka blev arbetet med klasser i PHP och de magiska metoderna __toString, __get m.m.<br>
        Det blir lite rörigt för mig när man rör sig mellan js, python och php... jag saknar t.ex. get för specika
        variabler och __compare för att jämföra två klass instanser.<br>
    </p>
</article>


<article id="kmom03">
    <h2>Kmom03</h2>

    <p>
        Både flödesdiagram och psuedokod var nytt för mig.<br>
        Flödesdiagrammet tycker jag var bra och tycker jag fick till det ganska bra.
        Ser också hur det kan hjälpa till så man tänker rätt.<br>

        Psuedokod kanske var lite svårare,
        mest för att jag kanske inte riktigt förstår på vilken nivå man ska lägga den.
        Och heller inte riktigt hur fritt man kan skriva.<br>
        Jag hittade <a href="https://pseudoeditor.com/app/">pseudoeditor.com</a> som jag använde.<br>
        Jag gjorde mer en grov modell av hur jag tänkt flödet, där man egentligen skulle se både användare och bank som
        spelare.<br>
    </p>
    <p>
        Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken
        förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?
        Jag valde att skapa en ny class där all spelligik finns.<br>
        Denna klass använde sedan kortlek och "korthänder" från tidigare uppgifter.<br>
        Jag hade lite problem med PHP hantering av "Passing by Reference", men fick till det.
    </p>
    <p>
        Nu när vi går vidare så blir det väldigt snabbt och enkelt att forsätta med Symfony.<br>
        Skönt att bara kunna fokusera på koden och lätt få hjälpen från ramverket att visa det man önskar.
    </p>
    <p>
        TIL denna vecka blev att läsa på om "Passing by Reference".
    </p>
</article>


<article id="kmom04">
    <h2>Kmom04</h2>

    <p>
        <!-- Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt. -->
        Jag tycker det var ganska enkelt att skriva test
        och det känns som att det är en bra metod att använda för att säkerställa att koden fungerar som den ska.<br>
        Jag har tidigare skrivit test i python och det känns som att det är ungefär samma sak.<br>

    </p>

    <p>
        <!-- Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning? -->
        Jag lyckades med att få 92% kodtäckning på min kod.<br>
        Vilket jag är nöjd med, det är svårt att få alla rader testade när det handlar om spel med slumpmässiga kort.

    </p>

    <p>
        <!-- Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet? -->
        Jag tycker att min kod är testbar, men precis som ovan är det vissa rader som är svåra att nå med test.<br>
        Det var också svårt att testa en del av koden som kastar ett E_NOICE fel.<br>
        Efersom phpunite i version 10 och högre inte kan testa varningar.<br>
        Jag valde att inte testa den delen av koden.
    </p>

    <p>
        <!-- Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte. -->
        Jag valde att inte skriva om någon kod för att göra den mer testbar.<br>
        Men vissa rader som gjorde felkontroller som omöjligen kunde uppstå togs bort.
    </p>

    <p>
        <!-- Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”. -->
        Jag tycker att testbar kod är snygg och ren kod.<br>
        Det är lätt att se vad koden gör och att den fungerar som den ska.
    </p>

    <p>
        <!-- Vilken är din TIL för detta kmom? -->
        TIL denna vecka är att skriva test i phpunit.<br>
        Det var helt nytt för mig och jag tycker att det var en bra metod att använda för att säkerställa att koden
        fungerar som den ska.<br>
        Skönt att komma över den tröskeln.
    </p>
</article>

<article id="kmom05">
    <h2>Kmom05</h2>
    <p>
        Det var lite segt att komma igång med Doctrine,
        jag tyckte framförallt att jag inte hittade någon bra documentation av metoder som finns i Doctrine.<br>
        Jag hittade en del exempel, men skulle önskad att det fanns en bättre API dokumentation.<br>
        Det kanske finns, bara jag som inte hittade.<br>

        Sedan tycker jag det gick bra, även om jag inte jobbat med ORM tidigare.<br>
        Det är spännande att pröva det sättet av jobba med databaser.<br>
    </p>
    <p>
        Jag började med att designa databasen (entity).<br>
        Det det blev en enkel "bok" med titel, författare och ISBN samt ett fält för bild.<br>
        Jag valde att spare bilden som data url med base64, inte det mest effektiva men allt är samlat i databasen.<br>
        Och det var enkelt att visa upp bilden i twig utan att länka.<br>

        Jag började med att göra en enkel sida som visade upp alla böcker i databasen.<br>
        Sedan la jag till en sida där man kunde lägga till böcker.<br>
        För att inte upprepa kod är det samma sida som sedan används för att redigera böcker.<br>

    </p>
    <p>
        Det gick bra att jobba med ORM i CRUD.<br>
        Saknade som sagt en bra sammanfattande dokumentation av metoder.<br>
        Jag lyckades hitta det jag behövde och det gick bra.<br>
    </p>
    <p>
        I vissa aspekter är det enklare att jobba med objekt i ORM.<br>
        Det är ganska naturligt att jobba med denna typ av applikation vi gjorde som objekt.<br>
        Där datan naturligt kan representeras som ett objekt.<br>
    </p>
    <p>
        TIL denna vecka är att jobba med ORM, även om jag kände till konceptet tidigare har jag aldrig jobbat med det.<br>
    </p>
</article>

<article id="kmom06">
    <h2>Kmom06</h2>
    <p>
        <!-- Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?-->
        PhpMetrics var sådär tycker jag.<br>
        Tycker det var svårt att förstå violations som "Probably bugged" och "Stable Abstractions Principle" som jag fick utan att hitta någon förklaring eller pekande på kod.<br>
        Det var också väldigt mycket siffror utan närmare referensvärden att jämföra med.<br>
        Men visst fanns det värdefulla delar, som "Complexity" och "Maintainability" som jag tycker är viktiga.<br>
    </p>
    <p>
        <!-- Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?-->
        Scrutinizer fungerade bra att integrera efter någon första miss med en gammal version av configurationsfilen.<br>
        Det tog också en tid att hitta runt i verktyget men sedan var det enklare att hitta referenser och kunna se koden på github.<br>
        "Badgen" ger en bra första känsla av kodkvalitet och kodtäckning.<br>
        Jag fick 9.86 i kodkvalitet och 30% i kodtäckning vid första körningen.<br>
        Kodkvalitet fick jag sedan upp till 9.95, det var några tester som var i motsats mot phpunit som jag inte fick ordning på.<br>
    </p>
    <p>
        <!-- Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du? -->
        Jag tycker att kodkvalitet är viktigt för att kunna underhålla och utveckla en kodbas.<br>
        Precis som ni visade i föreläsningen så har min kod tidigare påmint mycket om CImage... det fungerar men är svårt att underhålla.<br>
        Även för en själv... och om någon annan skulle ta över koden vill jag inte enst tänka på.<br>
        Jag tror att badges kan vara en bra indikation på kodkvalitet.<br>
    </p>
    <p>        
        <!-- Vilken är din TIL för detta kmom? -->
        TIL denna vecka är blev att verkligen tänka igenom komplexitet i koden, minska antalet if, switch etc.<br>
    </p>
</article>

<article id="kmom10">
    <h2>Kmom10</h2>

    <ol>
        <li>
            <h3>Innehåll och utseende</h3>
            <p>
                Mitt val för projektet blev att bygga Patiensen “Poker Square”.<br>
                Tanken var att återanvända klasserna Card och DeckOfCards som jag byggt tidigare.<br>
                Spelet är byggt som en separat klass med metoder för att spela spelet.<br>            
            </p>
            <h4>Egenskaper</h4>
            <ul>
                <li><b>cardGrid</b> - ett 5x5 rutnät som används för att placera kort på spelplanen.</li>
                <li><b>deck</b> - en kortlek som används för att dra kort från.</li>
                <li><b>activeCard</b> - det kort som dras från kortleken och ska placeras på spelplanen.</li>
            </ul>

            <h4>Publica metoder</h4>
            <ul>
                <li><b>placeCard</b> - placerar ett kort på spelplanen.</li>
                <li><b>getPoints</b> - räknar ut poängen varje rad/kolumn.</li>
                <li><b>getTotalPoints</b> - summerar poängen för hela spelplanen.</li>
            </ul>

            <h4>Metoden handValue</h4>
            <p>
                Denna privata metod är den mest komplexa i spelet.<br>
                Den räknar ut poängen för en rad eller kolumn.<br>
                Metoden tar en array med kort som parameter och returnerar poängen för denna rad eller kolumn.<br>
                Speciellt var det svårt att få ner komplexiteten i metoden.<br>
                Men med runt 30 kodrader och 9 if-satser känns det som att jag lyckats ganska bra.<br>
            </p>

        </li>
        <li>
            <h3>Repo och dokumentation</h3>

            <h4>Scrutinizer</h4>
            <p>
                Jag har integrerat Scrutinizer i mitt projekt.<br>
                Jag har fått upp min kodkvalitet till 9.75 och kodtäckning till 95%.<br>
                Enhetstester körs på classerna Card, DeckOfCards och PokerSquare.<br>
                Dessutom körs applikationstester på controllers och routes.<br>
            </p>

            <h4>Testning och kodtäckninge</h4>
            <p>
                PHPUnit rapporterar 95% kodtäckning.<br>
                Enhetstester på klasserna för spelen har totalt 93% kodtäckning.<br>
                Det är vissa delar som bara nås vid fel som jag inte testar.<br>
                Applikationstester på controllers inkl. databas och routes är 100%<br>
            </p>
                

        </li>
        <li style="visibility:hidden">
            <h3></h3>
        </li>
        <li>
            <h3>JSON API</h3>
            <p>
                Jag har implementerat en <a href="{{ path('proj/api') }}">JSON API</a> för att spela spelet.<br>
                Man kan dra ett kort, placera det på spelplanen och se poängen.<br>
                Och även en high score sida som visar de 100 bästa resultaten.<br>
                Till documentationssidan använde jag highlight.js för att få snygga JSON exempel.<br>
                Även POST routes går att klicka på.<br>
            </p>
        </li>
        <li>
            <h3>ORM</h3>
            <p>
                Jag implemeterade databasen för att spara high score.<br>
                Jag valde att spara namn och poäng i databasen.<br>
                För att lära mig så Association Mapping så valde jag att spara namn och poäng i två olika tabeller.<br>
                Jag tycker fortfarand här att dokumentationen är lite svår att hitta.<br>
                Doctrine har mycket exempl och tutorials men jag saknar en bra API dokumentation.<br>
                Men relationen är implemeterade och fungerar som det ska.<br>
                En användare kan ha flera "high scores".<br>
            </p>

            <p>
                Relationer började jag bygga manuellt först, men till slut blev det konsol programmet som byggde relationen.<br>
                Jag använder SQLite som databas.<br>
                Jag har inte gjort enhetstester mot databasen men applikationstester som också läser och skriver till databasen.<br>
                Dessa fungerar även i Scrutinizer eftersom jag implementerat att Scrutinizer skapar databserna i samband med composer install.<br>
            </p>
        </li>
        <li>
            <h3>Avancerade features</h3>
            <ul>
                <li>
                    <h4>Metoden handValue</h4>
                    <p>
                        Som med ganska låg komplexitet räknar ut en poker hand.<br>
                        Det skulle med trix kunna gå att få ner den beräknade komplexiteten ytterligare.<br>
                        Men jag tycker inte det skulle hjälpa läsbarheten av koden för en mänsklig användare.<br>
                    </p>
                </li>
                <li>
                    <h4>Test av Symfony controllers</h4>
                    <p>
                        Jag har testat mina controllers med phpunit.<br>
                        Med 100% kodtäckning.<br>
                    </p>
                </li>
                <li>
                    <h4>Relationer i ORM</h4>
                    <p>
                        Även om databasen är liten så är relationer implemeterade.<br>
                    </p>
                </li>
                <li>
                    <h4>Applikationstester inkluderar databasen</h4>
                    <p>
                        Applikationstesterna som testar controllers inkluderar även läs/skriv av databasen.<br>
                        Och dessa fungerar även på Scrutinizer.<br>
                    </p>
                </li>
            </ul>
        </li>
    </ol>

    <ul>
        <li>
            <h3>Hur projektet gick att genomföra</h3>
            <p>
                Om jag ska vara ärligt, så gick det lite segt...<br>
                Det börjar bli sommar, jag har pluggat första gången på 20 år, det ska helt enkelt bli skönt med lite ledigt.<br>
                Mest tid gick åt till småfix t.ex. att få Scrutinizer att fungera.<br>
                Det kanske bara är jag men jag tycker inte jag hittade dokumention på det sätt jag önskade för Scrutinizer och Doctrine<br>
                Symfony var bättre, men jag tycker jag saknar en bra översikt.<br>
            </p>
        </li>
        <li>
            <h3>Tankar om kursen</h3>
            <p>
                Jag tycker att kursen varit bra, jag har lärt mig mycket och det har varit roligt.<br>
                Jag tycker att det varit bra att vi fått jobba med ett ramverk som Symfony.<br>
                Det har varit en bra introduktion till objektorienterad programmering och MVC i php.<br>
                Jag tycker att det varit bra att vi fått jobba med enhetstester och kodkvalitet.<br>
                Det är viktiga delar som jag inte jobbat med tidigare.<br>
                Och än en gång bli bättre på att typa och strukturera min PHP kod.<br>
            </p>
            <p>
                Jag kanske hellre hade sett att vi jobbat med Laravel som ramverk.<br>
                Det verkar vara det ledande ramverket i php och det hade varit bra att lära sig det.<br>
            </p>
        </li>
    </ul>
</article>


{% endblock %}