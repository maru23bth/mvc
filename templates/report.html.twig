{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
<h1>Redovisning i kursen mvc</h1>

<article id="kmom01">
    <h2>Kmom01</h2>

    <p>
        PHP har jag jobbat med till och från sedan version 2 ungefär tror jag.<br>
        Och några mindre försök i objektorienterad stil också, men inte speciellt mycket.<br>


    </p>
    <p>
        En klass är en "mall" som man använder för att skapa nya objekt.<br>
        Klasser kan innehålla metoder (funktioner) och properties(varibler).<br>
        Klasser och objekt är två begrepp som är viktiga när det gäller objektorienterad programmering.<br>
        Klassen är en mall för objektet kan man säga, för att utnyttja klassens metoder måste man skapa ett objekt.<br>
        Ett objekt är en förekomst av en klass.<br>
        <br>
        En klass kan dock innehålla statiska metoder och properties som kan köras utan att ett objekt skapats från klassen.
    </p>
    <p>
        Jag uppfattar kodbas och koden som väldigt strukturerad och gillar den.<br>
        Det är min första bekantskap med symfony och det finns nog mer att lära.<br>
        Kanske skulle jag önskat lite mer struktur på routes, men det går säkert att göra själv.<br>
    </p>
    <p>
        För mig med en del väldigt enkel PHP bakom mig vill jag framförallt bli bättre på att organisera min kod.<br>
        Så värdefulla delar är framförallt Namespaces, autoloading m.m. som jag vill lära mig mer om.<br>
    </p>
    <p>
        Att sätta upp och använda Symfony blir mitt TIL denna vecka.<br>
    </p>
</article>

<article id="kmom02">
    <h2>Kmom02</h2>

    <ul>
        <li><b>Arv</b>
            Ärver egenskaper från en föräldrarklass.
            Dvs. de variabler (egenskaper) och metoder som skapas i den nya klassen kan addera funktion eller skriva över funktioner från föräldrarklassen.<br>
            Föräldrarklssens variabler och metoder finns också i den nya klassen.
        </li>
        <li><b>Komposition</b>
            Komposition är när en klass innehåller en eller flera andra klasser.
        </li>
        <li><b>Interface</b>
            Objektgränssnitt anger vilka metoder en klass måste implementera.<br>
            Men utan att definiera hur dessa metoder ska implementeras.
        </li>
        <li><b>Trait</b>
            Mekanism för kodåteranvändning eftersom PHP bara kan ärva från en klass.<br>
            Definieras en trait "class" kan denna kod "importeras" och därmed användas i flera klasser.
        </li>
    </ul>
    
    <p>
        Jag började med att göra Card klassen, som var ganska självförklarande.<br>
        Därefter började jag med DeckOfCards...
        när jag senare skulle börja med CardHand kom jag underfund med att en "hand" och kortlek delar grundegenskapen att hålla kort.<br>
        Och jag strukturerade därför om och skapade CardCollection som har som uppgift att hålla 0 eller flera Card.<br>
        Därmed fick CardHand och DeckOfCards ärva CardCollection klassen.<br>
        Den konstruktionen är jag just nu nöjd med...<br>
        Jag har fokuserat på funktionen, så gränssnittet finns det mycket att jobba med.
    </p>

    <p>
        Jag gillar strukturen i Symfony, det jag kanske skulle önska är lite mer folder -> route stuktur.<br>
        Det kanske går att göra, men just nu kan vilket som hellst route dölja sig i vilken controller som helst.<br>
    </p>

    <p>
        TIL denna vecka blev arbetet med klasser i PHP och de magiska metoderna __toString, __get m.m.<br>
        Det blir lite rörigt för mig när man rör sig mellan js, python och php... jag saknar t.ex. get för specika variabler och __compare för att jämföra två klass instanser.<br>        
    </p>
</article>


{% endblock %}

